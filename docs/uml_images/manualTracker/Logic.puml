@startuml
left to right direction
hide circle
skinparam classAttributeIconSize 0
skinparam BoxPadding 20
skinparam shadowing false
skinparam linetype ortho
skinparam package<<Layout>> {
  borderColor Transparent
  backgroundColor Transparent
  fontColor Transparent
  stereotypeFontColor Transparent
}

rectangle Logic {



    package p2 <<Layout>> {
    }

    class ParamChecker <<Singleton>>{
        + checkAndReturnDate(paramType : String) : LocalDate
        + checkAndReturnTime(paramType : String) : LocalTime
        + checkAndReturnIndex(paramType : String, list : ArrayList) : Integer
        + checkAndReturnDouble(paramType : String) : Double
        + checkAndReturnInt(paramType : String) : Integer
        + checkAndReturnCategory(paramType : String) : String
    }


rectangle Commands {
    abstract class ParamHandler {
        # paramChecker : ParamChecker
        # hasParsedAllParams : boolean
        + handleParams(packet : CommandPacket) : void
        + getHasParsedAllRequiredParams() : boolean
        + setRequiredParams(paramTypes : String...) : void
        # checkParamRequirementSatisfied(param : String) : boolean
        + {abstract} handleSingleParam(packet : CommandPacket, paramType : String)
    }

    rectangle LedgerCommands {
        class createLedgerCommand {
            + handlePacket() : void
            + handleSingleParams(paramType : String) : void
            + handleParams(packet : CommandPacket) : void
        }
        class retrieveLedgerCommand {
            + handlePacket() : void
            + handleSingleParams(paramType : String) : void
            + handleParams(packet : CommandPacket) : void
        }
    }

    rectangle XYZCommands {
    }



    rectangle EntryCommands {
        class createEntryCommand {
            + handlePacket() : void
            + handleSingleParams(paramType : String) : void
            + handleParams(packet : CommandPacket) : void
        }
        class editEntryCommand {
            + handlePacket() : void
            + handleSingleParams(paramType : String) : void
            + handleParams(packet : CommandPacket) : void
        }
        class retrieveEntryCommand {
            + handlePacket() : void
            + handleSingleParams(paramType : String) : void
            + handleParams(packet : CommandPacket) : void
        }
        package p4 <<Layout>> {
        }

        package p5 <<Layout>> {
        }

        p4 -[hidden]- p5
        p5 -[hidden]- ParamHandler
    }




    ParamChecker "1" <.[norank]. createLedgerCommand #line:blue;text:black
    ParamChecker "1" <.[norank]. retrieveLedgerCommand #line:blue;text:black
    ParamChecker "1" <.[norank]. createEntryCommand #line:blue;text:black
    ParamChecker "1" <.[norank]. editEntryCommand #line:blue;text:black
    ParamChecker "1" <.[norank]. retrieveEntryCommand #line:blue;text:black
    ParamChecker "1" <.[norank]. XYZCommands #line:blue;text:black
    ParamHandler <|-[norank]- createLedgerCommand #line:purple;line.bold;text:red
    ParamHandler <|-[norank]- retrieveLedgerCommand #line:purple;line.bold;text:red
    ParamHandler <|-[norank]- createEntryCommand #line:purple;line.bold;text:red
    ParamHandler <|-[norank]- retrieveEntryCommand #line:purple;line.bold;text:red
    ParamHandler <|-[norank]- editEntryCommand #line:purple;line.bold;text:red
    ParamHandler <|-[norank]- XYZCommands #line:purple;line.bold;text:red

    note bottom of XYZCommands: Includes FinanceTools Calculator functions\n, RecurringEntry Commands, etc.
}

note right of ParamChecker: Contains methods that check validity of params supplied





@enduml