@startuml
skinparam classAttributeIconSize 0
abstract class ParamHandler {
    # requiredParams : HashSet<String>
    # paramsSuccessfullyParsed : HashSet<String>
    # missingRequiredParams : HashSet<String>
    # paramChecker : ParamChecker
    # hasParsedAllParams : boolean
    + handleParams(packet : CommandPacket) : void
    + getHasParsedAllRequiredParams() : boolean
    + setRequiredParams(paramTypes : String...) : void
    + resetAllParamCollections() : void
    # checkParseFailedParams() : boolean
    # checkParamRequirementSatisfied(param : String) : boolean
    + {abstract} handleSingleParam(packet : CommandPacket, paramType : String)
}

class ParamChecker {
    + checkAndReturnDate(paramType : String) : LocalDate
    + checkAndReturnTime(paramType : String) : LocalTime
    + checkAndReturnIndex(paramType : String, list : ArrayList) : Integer
    + checkAndReturnDouble(paramType : String) : Double
    + checkAndReturnInt(paramType : String) : Integer
    + checkAndReturnCategory(paramType : String) : String
}

abstract class Item {
    # index : int
    + {abstract} getName() : String
}

abstract class ItemList {
    # currItem : Item
    # items : ArrayList<Item>
    # indexToModify : int

    + addItemAndSort(item : Item, comparator : Comparator)
    + getItemSize() : int
    + getItemAtIndex() : Item
    + getItemAtIndex(index : int) : Item
    + {abstract} printList()
}

class Ledger {
    # date : LocalDate = null
    + entryList : EntryList
    + Ledger()
    + handlePacket(packet : CommandPacket) : void
    + getName() : String
    + handleSingleParam(packet : CommandPacket, paramType : String)
}

class Entry {
    # date : LocalDate = null
    + Entry()
    + handlePacket(packet : CommandPacket) : void
    + getName() : String
    + handleSingleParam(packet : CommandPacket, paramType : String)
}

ParamHandler "1" *--> "1" ParamChecker : have params checked by
ParamHandler --|> Item
ParamHandler --|> ItemList
Item --|> Ledger
Item --|> Entry
ItemList --|> LedgerList
ItemList --|> EntryList
Ledger "1" -- "1" EntryList
LedgerList --> "*" Ledger
EntryList --> "*" Entry

@enduml

@startuml
autoactivate on
ManualTracker -> ManualTracker : handleCreateLedger()
create Ledger
ManualTracker -> Ledger : new Ledger()
return

ManualTracker -> Ledger : setRequiredParams()
return
ManualTracker -> Ledger : handlePacket
Ledger -> Ledger : handleParams
loop For all paramTypes \nin the command packet
    Ledger -> Ledger : handleSingleParam
    alt "/date"
        Ledger -> Ledger : checkAndReturnDate()
        return
        Ledger -> Ledger : setDate()
        return
    end
    return
    return
end
return
ManualTracker -> LedgerList : addItem(ledger)
return
return state
@enduml