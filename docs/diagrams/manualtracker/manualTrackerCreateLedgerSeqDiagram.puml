@startuml
autoactivate on
actor User
scale 1094 width

skinparam shadowing false
skinparam sequence {
    ActorBorderColor white
    
    ActorBackgroundColor white
    ActorFontColor white
    ActorFontSize 17
    ActorFontName ""
}

box "Data Tracker" #LightYellow
participant ":ManualTracker" as manualTracker <<class>>
endBox

box "Logic" #LightBlue
participant ":CreateLedgerCommand"
participant ":ParamChecker"
endBox

box "Data" #LightGreen
participant ":ledger:Ledger"
participant "ledger:LedgerList"
endBox

User-> manualTracker: Create Ledger

manualTracker ->manualTracker: handleCreateLedger()

   manualTracker-> ":CreateLedgerCommand" : getInstance()
    return handler

   manualTracker-> ":CreateLedgerCommand" : handlePacket(packet)

        create ":ledger:Ledger"
        ":CreateLedgerCommand" -> ":ledger:Ledger" : Ledger()
        return
        == Handling of Params in packet ==
        ":CreateLedgerCommand" -> ":CreateLedgerCommand" : handleParams(packet)
            ":CreateLedgerCommand" -> ":ParamChecker" : setPacket(packet)
            return
            loop For all paramType in the command packet
                note left: "Note: Params will be verified for correctness\nby ParamChecker singleton class before being\nset into the ledger instance."
                ":CreateLedgerCommand" -> ":CreateLedgerCommand" : handleSingleParam(packet, paramType)
                    alt "paramType = PARAM_DATE"
                        ":CreateLedgerCommand" ->":ParamChecker": checkAndReturnDate(paramType)
                        return date
                        ":CreateLedgerCommand" -> ":ledger:Ledger" : setDate(date)
                        return
                    end
                return
            end
        return
   return
   == Retrieval of newly created ledger from the command instance ==
   manualTracker-> ":CreateLedgerCommand" : getCurrLedger()
   return ledger
   == Storing of ledger into ledgerList ==
   manualTracker-> "ledger:LedgerList" : addItem(ledger)
    return
return state
return


@enduml